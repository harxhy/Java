class Router:
    def __init__(self, num_nodes):
        self.num_nodes = num_nodes
        self.distances = [[float('inf')] * num_nodes for _ in range(num_nodes)]
        self.next_hop = [[None] * num_nodes for _ in range(num_nodes)]

    def initialize_routing_table(self, cost_matrix):
        for i in range(self.num_nodes):
            for j in range(self.num_nodes):
                self.distances[i][j] = cost_matrix[i][j]
                self.next_hop[i][j] = j

    def update_routing_table(self):
        for _ in range(self.num_nodes):
            for i in range(self.num_nodes):
                for j in range(self.num_nodes):
                    for k in range(self.num_nodes):
                        if self.distances[i][j] > self.distances[i][k] + self.distances[k][j]:
                            self.distances[i][j] = self.distances[i][k] + self.distances[k][j]
                            self.next_hop[i][j] = k

    def print_routing_table(self):
        print("Routing Table:")
        for i in range(self.num_nodes):
            print(f"Router {i} ->")
            for j in range(self.num_nodes):
                print(f"  To Router {j}: Distance = {self.distances[i][j]}, Next Hop = {self.next_hop[i][j]}")

if __name__ == "__main__":
    num_nodes = int(input("Enter the number of routers: "))  # Get the number of nodes from the user
    cost_matrix = []
    print("Enter the cost matrix (space-separated values):")
    for _ in range(num_nodes):
        row = list(map(float, input().split()))
        cost_matrix.append(row)

    router = Router(num_nodes)
    router.initialize_routing_table(cost_matrix)
    router.update_routing_table()
    router.print_routing_table()
